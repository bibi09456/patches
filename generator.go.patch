--- generator.go.bak	2023-04-28 21:24:31.032000063 +0700
+++ generator.go	2023-05-03 01:04:28.098665302 +0700
@@ -16,9 +16,6 @@
 package generator
 
 import (
-	"fmt"
-	"strings"
-
 	"github.com/google/blueprint"
 	"github.com/google/blueprint/bootstrap"
 	"github.com/google/blueprint/proptools"
@@ -33,10 +30,6 @@
 
 var String = proptools.String
 
-var (
-	pctx = android.NewPackageContext("android/soong/generator")
-)
-
 type HostToolProvider interface {
 	HostToolPath() android.OptionalPath
 }
@@ -226,61 +219,6 @@
 			g.inputDeps = append(g.inputDeps, android.PathForSourceRelaxed(ctx, path))
 		}
 	}
-
-	cmd := omniromExpandVariables(ctx, String(g.properties.Cmd))
-
-	rawCommand, err := android.Expand(cmd, func(name string) (string, error) {
-		switch name {
-		case "location":
-			if len(g.properties.Tools) == 0 && len(toolFiles) == 0 {
-				return "", fmt.Errorf("at least one `tools` or `tool_files` is required if $(location) is used")
-			}
-
-			if len(g.properties.Tools) > 0 {
-				return tools[g.properties.Tools[0]].String(), nil
-			} else {
-				return tools[toolFiles[0].Rel()].String(), nil
-			}
-		case "genDir":
-			return android.PathForModuleGen(ctx).String(), nil
-		default:
-			if strings.HasPrefix(name, "location ") {
-				label := strings.TrimSpace(strings.TrimPrefix(name, "location "))
-				if tool, ok := tools[label]; ok {
-					return tool.String(), nil
-				} else {
-					return "", fmt.Errorf("unknown location label %q", label)
-				}
-			}
-			return "", fmt.Errorf("unknown variable '$(%s)'", name)
-		}
-	})
-
-	if err != nil {
-		ctx.PropertyErrorf("cmd", "%s", err.Error())
-		return
-	}
-
-	// Dummy output dep
-	dummyDep := android.PathForModuleGen(ctx, ".dummy_dep")
-
-	genDir := android.PathForModuleGen(ctx)
-	manifestPath := android.PathForModuleOut(ctx, "generator.sbox.textproto")
-
-	// Use a RuleBuilder to create a rule that runs the command inside an sbox sandbox.
-	rule := android.NewRuleBuilder(pctx, ctx).Sbox(genDir, manifestPath).SandboxTools()
-
-	rule.Command().
-		Text(rawCommand).
-		ImplicitOutput(dummyDep).
-		Implicits(g.inputDeps).
-		Implicits(g.implicitDeps)
-
-	rule.Command().Text("touch").Output(dummyDep)
-
-	g.outputDeps = append(g.outputDeps, dummyDep)
-
-	rule.Build("generator", "generate")
 }
 
 func NewGenerator() *Module {
